{"version":3,"sources":["feedback.js"],"names":["define","scoring","feedback","default_feedback","warning","suggestions","get_feedback","score","sequence","extra_feedback","i","len","longest_match","match","ref","length","this","slice","token","get_match_feedback","unshift","is_sole_match","pattern","get_dictionary_match_feedback","graph","toUpperCase","turns","base_token","regex_name","word","dictionary_name","l33t","reversed","guesses_log10","rank","START_UPPER","push","ALL_UPPER","toLowerCase"],"mappings":";;;;;;;AAAAA,QACE,aACA,SAASC,GACT,IAAIC,GACFC,kBACEC,QAAS,GACTC,aAAc,wCAAyC,sDAEzDC,aAAc,SAASC,EAAOC,GAC5B,IAAIC,EAAgBC,EAAGC,EAAKC,EAAeC,EAAOC,EAClD,GAAwB,IAApBN,EAASO,OAEX,OAAOC,KAAKb,iBAGd,GAAII,EAAQ,EACV,OACEH,QAAS,GACTC,gBAMJ,IAFAO,EAAgBJ,EAAS,GAEpBE,EAAI,EAAGC,GADZG,EAAMN,EAASS,MAAM,IACCF,OAAQL,EAAIC,EAAKD,KACrCG,EAAQC,EAAIJ,IACFQ,MAAMH,OAASH,EAAcM,MAAMH,SAC3CH,EAAgBC,GAgBpB,OAZAJ,EAAiB,sDACD,OAFhBP,EAAWc,KAAKG,mBAAmBP,EAAmC,IAApBJ,EAASO,UAGzDb,EAASG,YAAYe,QAAQX,GACL,MAApBP,EAASE,UACXF,EAASE,QAAU,KAGrBF,GACEE,QAAS,GACTC,aAAcI,IAGXP,GAETiB,mBAAoB,SAASN,EAAOQ,GAElC,OAAQR,EAAMS,SACZ,IAAK,aACH,OAAON,KAAKO,8BAA8BV,EAAOQ,GACnD,IAAK,UAGH,OAFSR,EAAMW,MAAMC,eAGnBrB,QAFwB,IAAhBS,EAAMa,MAAc,0CAA4C,4CAGxErB,aAAc,kDAElB,IAAK,SAEH,OACED,QAFoC,IAA5BS,EAAMc,WAAWZ,OAAe,uCAAyC,wEAGjFV,aAAc,wCAElB,IAAK,WACH,OACED,QAAS,+CACTC,aAAc,oBAElB,IAAK,QACH,GAAyB,gBAArBQ,EAAMe,WACR,OACExB,QAAS,iCACTC,aAAc,qBAAsB,6CAGxC,MACF,IAAK,OACH,OACED,QAAS,gCACTC,aAAc,yDAItBkB,8BAA+B,SAASV,EAAOQ,GAC7C,IAAIP,EAAaT,EAAaD,EAASyB,EAmBvC,OAlBAzB,EAAoC,cAA1BS,EAAMiB,iBAAkCT,GAAkBR,EAAMkB,MAASlB,EAAMmB,SAAgKnB,EAAMoB,eAAiB,EAAI,mDAAgD,EAAhOpB,EAAMqB,MAAQ,GAAK,mCAAqCrB,EAAMqB,MAAQ,IAAM,oCAAsC,iCAAiJ,sBAA1BrB,EAAMiB,gBAA0CT,EAAgB,yCAAsC,EAA2C,cAAjCP,EAAMD,EAAMiB,kBAA2C,eAARhB,GAAgC,iBAARA,EAAyBO,EAAgB,qDAAuD,8CAAgD,GACppBhB,MACAwB,EAAOhB,EAAMK,OACJL,MAAMZ,EAAQkC,aACrB9B,EAAY+B,KAAK,yCACRP,EAAKhB,MAAMZ,EAAQoC,YAAcR,EAAKS,gBAAkBT,GACjExB,EAAY+B,KAAK,6DAEfvB,EAAMmB,UAAYnB,EAAMK,MAAMH,QAAU,GAC1CV,EAAY+B,KAAK,8CAEfvB,EAAMkB,MACR1B,EAAY+B,KAAK,2EAGjBhC,QAASA,EACTC,YAAaA,KAMnB,OAAOH","file":"../feedback.js","sourcesContent":["define([\n  './scoring'\n],function(scoring){\n  var feedback = {\n    default_feedback: {\n      warning: '',\n      suggestions: [\"Use a few words, avoid common phrases\", \"No need for symbols, digits, or uppercase letters\"]\n    },\n    get_feedback: function(score, sequence) {\n      var extra_feedback, i, len, longest_match, match, ref;\n      if (sequence.length === 0) {\n        // starting feedback\n        return this.default_feedback;\n      }\n      // no feedback if score is good or great.\n      if (score > 2) {\n        return {\n          warning: '',\n          suggestions: []\n        };\n      }\n      // tie feedback to the longest match for longer sequences\n      longest_match = sequence[0];\n      ref = sequence.slice(1);\n      for (i = 0, len = ref.length; i < len; i++) {\n        match = ref[i];\n        if (match.token.length > longest_match.token.length) {\n          longest_match = match;\n        }\n      }\n      feedback = this.get_match_feedback(longest_match, sequence.length === 1);\n      extra_feedback = 'Add another word or two. Uncommon words are better.';\n      if (feedback != null) {\n        feedback.suggestions.unshift(extra_feedback);\n        if (feedback.warning == null) {\n          feedback.warning = '';\n        }\n      } else {\n        feedback = {\n          warning: '',\n          suggestions: [extra_feedback]\n        };\n      }\n      return feedback;\n    },\n    get_match_feedback: function(match, is_sole_match) {\n      var layout, warning;\n      switch (match.pattern) {\n        case 'dictionary':\n          return this.get_dictionary_match_feedback(match, is_sole_match);\n        case 'spatial':\n          layout = match.graph.toUpperCase();\n          warning = match.turns === 1 ? 'Straight rows of keys are easy to guess' : 'Short keyboard patterns are easy to guess';\n          return {\n            warning: warning,\n            suggestions: ['Use a longer keyboard pattern with more turns']\n          };\n        case 'repeat':\n          warning = match.base_token.length === 1 ? 'Repeats like \"aaa\" are easy to guess' : 'Repeats like \"abcabcabc\" are only slightly harder to guess than \"abc\"';\n          return {\n            warning: warning,\n            suggestions: ['Avoid repeated words and characters']\n          };\n        case 'sequence':\n          return {\n            warning: \"Sequences like abc or 6543 are easy to guess\",\n            suggestions: ['Avoid sequences']\n          };\n        case 'regex':\n          if (match.regex_name === 'recent_year') {\n            return {\n              warning: \"Recent years are easy to guess\",\n              suggestions: ['Avoid recent years', 'Avoid years that are associated with you']\n            };\n          }\n          break;\n        case 'date':\n          return {\n            warning: \"Dates are often easy to guess\",\n            suggestions: ['Avoid dates and years that are associated with you']\n          };\n      }\n    },\n    get_dictionary_match_feedback: function(match, is_sole_match) {\n      var ref, result, suggestions, warning, word;\n      warning = match.dictionary_name === 'passwords' ? is_sole_match && !match.l33t && !match.reversed ? match.rank <= 10 ? 'This is a top-10 common password' : match.rank <= 100 ? 'This is a top-100 common password' : 'This is a very common password' : match.guesses_log10 <= 4 ? 'This is similar to a commonly used password' : void 0 : match.dictionary_name === 'english_wikipedia' ? is_sole_match ? 'A word by itself is easy to guess' : void 0 : (ref = match.dictionary_name) === 'surnames' || ref === 'male_names' || ref === 'female_names' ? is_sole_match ? 'Names and surnames by themselves are easy to guess' : 'Common names and surnames are easy to guess' : '';\n      suggestions = [];\n      word = match.token;\n      if (word.match(scoring.START_UPPER)) {\n        suggestions.push(\"Capitalization doesn't help very much\");\n      } else if (word.match(scoring.ALL_UPPER) && word.toLowerCase() !== word) {\n        suggestions.push(\"All-uppercase is almost as easy to guess as all-lowercase\");\n      }\n      if (match.reversed && match.token.length >= 4) {\n        suggestions.push(\"Reversed words aren't much harder to guess\");\n      }\n      if (match.l33t) {\n        suggestions.push(\"Predictable substitutions like '@' instead of 'a' don't help very much\");\n      }\n      result = {\n        warning: warning,\n        suggestions: suggestions\n      };\n      return result;\n    }\n  };\n\n  return feedback;\n});\n"]}