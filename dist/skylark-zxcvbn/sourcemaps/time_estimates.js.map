{"version":3,"sources":["time_estimates.js"],"names":["define","estimate_attack_times","guesses","crack_times_display","crack_times_seconds","scenario","seconds","online_throttling_100_per_hour","online_no_throttling_10_per_second","offline_slow_hashing_1e4_per_second","offline_fast_hashing_1e10_per_second","this","display_time","score","guesses_to_score","base","display_num","display_str","year","minute","hour","day","month","Math","round"],"mappings":";;;;;;;AAAAA,UAAU,WA4DR,OAxDEC,sBAAuB,SAASC,GAC9B,IAAIC,EAAqBC,EAAqBC,EAAUC,EAQxD,IAAKD,KADLF,KANAC,GACEG,+BAAgCL,GAAW,IAAM,MACjDM,mCAAoCN,EAAU,GAC9CO,oCAAqCP,EAAU,IAC/CQ,qCAAsCR,EAAU,MAIhDI,EAAUF,EAAoBC,GAC9BF,EAAoBE,GAAYM,KAAKC,aAAaN,GAEpD,OACEF,oBAAqBA,EACrBD,oBAAqBA,EACrBU,MAAOF,KAAKG,iBAAiBZ,KAGjCY,iBAAkB,SAASZ,GAGzB,OADQ,EACJA,EAAU,KAEL,EACEA,EAAU,IAJb,EAMC,EACEA,EAAU,IAPb,EASC,EACEA,EAAU,KAVb,EAaC,EAGA,GAGXU,aAAc,SAASN,GACrB,IAAIS,EAAoBC,EAAaC,EAAkCC,EAWvE,OAVS,GACFC,KACDC,MACEC,QACRH,EAAOI,SACGJ,UACTF,EAAaC,GAAeX,EAAU,GAAK,KAAM,sBAAwBA,EANjE,IAMqFS,EAAOQ,KAAKC,MAAMlB,MAAoBS,YAAkBT,EAL/Ia,MAKiKJ,EAAOQ,KAAKC,MAAMlB,EANjL,OAM8MS,YAAkBT,EAJnOc,OAIoPL,EAAOQ,KAAKC,MAAMlB,EALrQa,SAKgSJ,UAAgBT,EAH/Se,SAGkUN,EAAOQ,KAAKC,MAAMlB,EAJtVc,UAIgXL,SAAeT,EAAUY,GAAQH,EAAOQ,KAAKC,MAAMlB,EAHjae,YAG6bN,WAAiBT,EAD5cY,UACieH,EAAOQ,KAAKC,MAAMlB,EAAUY,MAAiBH,WAAiB,KAAM,aAC3hB,MAAfC,GAAwC,IAAhBA,IAC3BC,GAAe,KAEVA","file":"../time_estimates.js","sourcesContent":["define([],function(){\n  var time_estimates;\n\n  time_estimates = {\n    estimate_attack_times: function(guesses) {\n      var crack_times_display, crack_times_seconds, scenario, seconds;\n      crack_times_seconds = {\n        online_throttling_100_per_hour: guesses / (100 / 3600),\n        online_no_throttling_10_per_second: guesses / 10,\n        offline_slow_hashing_1e4_per_second: guesses / 1e4,\n        offline_fast_hashing_1e10_per_second: guesses / 1e10\n      };\n      crack_times_display = {};\n      for (scenario in crack_times_seconds) {\n        seconds = crack_times_seconds[scenario];\n        crack_times_display[scenario] = this.display_time(seconds);\n      }\n      return {\n        crack_times_seconds: crack_times_seconds,\n        crack_times_display: crack_times_display,\n        score: this.guesses_to_score(guesses)\n      };\n    },\n    guesses_to_score: function(guesses) {\n      var DELTA;\n      DELTA = 5;\n      if (guesses < 1e3 + DELTA) {\n        // risky password: \"too guessable\"\n        return 0;\n      } else if (guesses < 1e6 + DELTA) {\n        // modest protection from throttled online attacks: \"very guessable\"\n        return 1;\n      } else if (guesses < 1e8 + DELTA) {\n        // modest protection from unthrottled online attacks: \"somewhat guessable\"\n        return 2;\n      } else if (guesses < 1e10 + DELTA) {\n        // modest protection from offline attacks: \"safely unguessable\"\n        // assuming a salted, slow hash function like bcrypt, scrypt, PBKDF2, argon, etc\n        return 3;\n      } else {\n        // strong protection from offline attacks under same scenario: \"very unguessable\"\n        return 4;\n      }\n    },\n    display_time: function(seconds) {\n      var base, century, day, display_num, display_str, hour, minute, month, year;\n      minute = 60;\n      hour = minute * 60;\n      day = hour * 24;\n      month = day * 31;\n      year = month * 12;\n      century = year * 100;\n      [display_num, display_str] = seconds < 1 ? [null, 'less than a second'] : seconds < minute ? (base = Math.round(seconds), [base, `${base} second`]) : seconds < hour ? (base = Math.round(seconds / minute), [base, `${base} minute`]) : seconds < day ? (base = Math.round(seconds / hour), [base, `${base} hour`]) : seconds < month ? (base = Math.round(seconds / day), [base, `${base} day`]) : seconds < year ? (base = Math.round(seconds / month), [base, `${base} month`]) : seconds < century ? (base = Math.round(seconds / year), [base, `${base} year`]) : [null, 'centuries'];\n      if ((display_num != null) && display_num !== 1) {\n        display_str += 's';\n      }\n      return display_str;\n    }\n  };\n\n  return time_estimates;\n});\n"]}